package com.mega.cicilan.cicilan.Services;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.json.JSONObject;

import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.*;

public class EncryptAndSign {

    /**
     * encryption key provided by PT Scoring to encrypt biz_data
     */
    static String cKey = "QZgYXcYkZV0e0h5NWTokgJGKGJgaaCA3";

    /**
     * RSA public key provided by PT Scoring to verify the response
     */
    public static final String publicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2aX8DdhAgHE+5X1NFDl3Lnfu2AZcPgS7mt2CJ+F8+SLaaod7/a6myWx9GIaWRKt6bgOXkVvTPD4QCZglrOa3z/ttm9NpjPNUo3UR9z9WaiVJdLINBxdSL8uOjOJz/ebQtb1RzJ13MpZ9Nv3FeWp/g+ETY37zny7mAuorYC0H/AhXkBD+qLpK1WDVXsdkG2kc4kNkorMLDZSHM11bQdCtKQ8SzR6pMV+KCM0eJ+R7hl1k/oEU6MiIRH3ffl4Pt85ajYzpp1l38s/45lz2wz5cDqFsCbdx/2geUEAbue3RXNFNEVxagoex1/TQoDvEbC6lsRge+WvhcIxbuph6v+LBqwIDAQAB";

    /**
     * RSA private key generated by customer to sign the request
     */
    public static String privateKey = """
            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
            BymWuxn3ts7bs2J1k36WwBJ1kpQzqic=
                """;
    /**
     * KTP No
     */

    /**
     * Mobile No
     */

    /**
     * API Name
     */
    public static final String apiName = "query.credit.score";

    /**
     * APP ID
     */
    public static final String appId = "1695201526530";

    /**
     * Costumer Id
     */
    public static final String costumerId = "89937479204864";

    /**
     * reqauest parameter in alphabetical order
     */
    public static final String sign_fields_request = "api_name,app_id,customer_id,encrypt,encrypt_type,flow_no,sign_type,timestamp,version,biz_data";
    public static final String SIGN_CONNECTION_STRING = "&";
    public static final String SIGN_CONNECTION_EQUAL_STRING = "=";
    public static final String SHA_WITH_RSA_ALGORITHM = "SHA256WithRSA";
    public static final String ALGORITHM = "RSA";
    public static String[] SignKeys;
    public static ObjectMapper objectMapper = new ObjectMapper();

    static String AES_PKCS5P = "AES/CBC/PKCS5Padding";
    static String charsetName = "utf-8";

    static {
        SignKeys = sign_fields_request.split(",");
        Arrays.sort(SignKeys);
    }

    public Map enc() throws Exception {
        Map bizData = new HashMap<String, String>();
        bizData.put("ktp_no", "3451242123456756");
        bizData.put("msisdn", "6282208240680");
        // bizData.put("scenario", "1");
        // bizData.put("tai", "203");

        // build request body
        String body = buildRequestJsonBody(bizData, "query.credit.score", appId, costumerId, true);
        JSONObject jsonObject = new JSONObject(body);
        return jsonObject.toMap();
    }

    public String dec(String base64) throws Exception {
        System.out.println(base64);
        base64 = base64.replaceAll("[\n\t]", "");
        base64 = base64.trim();
        base64 = base64.replace("2b", "+").replace("2f", "/").replace("2d", "-").replace("5f", "_");

        // byte[] decodedBytes = Base64.getUrlDecoder().decode(base64);

        // String cIv = cKey.substring(0, 16);
        // String decrypt = decrypt(base64, cKey, cIv);
        return "ok";
    }

    public static String buildRequestJsonBody(Map<String, Object> bizData, String api_name, String app_id,
            String customer_id, boolean encryptBizData) throws Exception {
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("api_name", api_name);
        requestBody.put("app_id", app_id);
        requestBody.put("customer_id", customer_id);
        requestBody.put("encrypt", encryptBizData);
        requestBody.put("encrypt_type", "AES-CBC");
        requestBody.put("flow_no", UUID.randomUUID().toString().replace("-", ""));
        requestBody.put("sign_type", "RSA-SHA256".toLowerCase());
        requestBody.put("timestamp", new Date().getTime());
        requestBody.put("version", "1.0");
        String bizDataJson = objectMapper.writeValueAsString(bizData);
        System.out.println(bizDataJson);
        if (encryptBizData) {
            // IV = 16
            String cIv = cKey.substring(0, 16);
            // encrypt biz_data
            String enString = EncryptNew(bizDataJson, cKey, cIv);
            System.out.println(enString);
            requestBody.put("biz_data", enString);
        } else {
            // don't need encryption
            requestBody.put("biz_data", bizDataJson);
        }
        privateKey = privateKey.replaceAll("\n", "");
        // build signature string
        String requestSignString = BuildSignString(requestBody);
        String sign = EncryptAndSign1.sign(requestSignString, privateKey, SHA_WITH_RSA_ALGORITHM);

        requestBody.put("sign", sign);
        return objectMapper.writeValueAsString(requestBody);
    }

    /**
     * generate the signature
     *
     * @param in
     * @param pivateKey
     * @param algorithm
     * @return
     * @throws Exception
     */
    public static String sign(String in, String pivateKey, String algorithm) throws Exception {
        PKCS8EncodedKeySpec priPKCS8 = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(pivateKey));
        KeyFactory keyf = KeyFactory.getInstance(ALGORITHM);
        PrivateKey priKey = keyf.generatePrivate(priPKCS8);
        Signature signa = Signature.getInstance(algorithm != null ? algorithm : SHA_WITH_RSA_ALGORITHM);
        signa.initSign(priKey);
        signa.update(in.getBytes());
        byte[] signdata = signa.sign();
        return Base64.getEncoder().encodeToString(signdata);
    }

    /**
     * verify the signature
     *
     * @param in
     * @param signData
     * @param publicKey
     * @param algorithm
     * @return
     * @throws Exception
     */
    public static boolean isValid(String in, String signData, String publicKey, String algorithm) throws Exception {
        KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);
        byte[] encodedKey = Base64.getDecoder().decode(publicKey);
        PublicKey pubKey = keyFactory.generatePublic(new X509EncodedKeySpec(encodedKey));
        Signature signa = Signature.getInstance(algorithm != null ? algorithm : SHA_WITH_RSA_ALGORITHM);
        signa.initVerify(pubKey);
        signa.update(in.getBytes());
        byte[] sign_byte = Base64.getDecoder().decode(signData);
        boolean flag = signa.verify(sign_byte);
        return flag;
    }

    public static String BuildSignString(Map<String, Object> requestBody) throws JsonProcessingException {
        StringBuilder buff = new StringBuilder();
        // connect string with &
        int index = 0;
        for (String key : SignKeys) {
            if (index > 0) {
                buff.append(SIGN_CONNECTION_STRING);
            }
            String value = objectMapper.writeValueAsString(requestBody.get(key));
            buff.append(key).append(SIGN_CONNECTION_EQUAL_STRING).append(value);
            index++;
        }
        return buff.toString();
    }

    /**
     * encrypt data with AES
     *
     * @param sSrc
     * @param sKey
     * @param sIv
     * @return
     * @throws Exception
     */
    public static String Encrypt(String sSrc, String sKey, String sIv) throws Exception {
        if (sKey == null) {
            System.out.print("key is null");
            return null;
        }
        byte[] raw = sKey.getBytes(charsetName);
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
        Cipher cipher = Cipher.getInstance(AES_PKCS5P);
        IvParameterSpec iv = new IvParameterSpec(sIv.getBytes());
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
        byte[] encrypted = cipher.doFinal(sSrc.getBytes());
        // base 64
        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String EncryptNew(String sSrc, String sKey, String sIv) throws Exception {
        AESEncryptDecrypt aesEncryptDecrypt = new AESEncryptDecrypt();
        String encrypt = aesEncryptDecrypt.encrypt(sSrc, sKey, sIv);
        return encrypt;
    }

    /**
     * decrypt data with AES
     *
     * @param base64Str
     * @param key
     * @param sIv
     * @return
     * @throws Exception
     */
    public static String decrypt(String base64Str, String key, String sIv) throws Exception {
        byte[] raw = key.getBytes(charsetName);
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
        Cipher cipher = Cipher.getInstance(AES_PKCS5P);
        IvParameterSpec iv = new IvParameterSpec(sIv.getBytes());
        cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);
        // decode with base64
        byte[] encrypted = Base64.getDecoder().decode(base64Str);
        byte[] original = cipher.doFinal(encrypted);
        String originalString = new String(original, "utf-8");
        return originalString;
    }

}
