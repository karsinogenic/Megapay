package com.mega.cicilan.cicilan.Services;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.json.JSONObject;

import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.*;

public class EncryptAndSign1 {

    /**
     * encryption key provided by PT Scoring to encrypt biz_data
     */
    static String cKey = "mmMUf7NsH2bw6qSrkAwGwS6MidBFriv5";

    /**
     * RSA public key provided by PT Scoring to verify the response
     */
    public static final String publicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2aX8DdhAgHE+5X1NFDl3Lnfu2AZcPgS7mt2CJ+F8+SLaaod7/a6myWx9GIaWRKt6bgOXkVvTPD4QCZglrOa3z/ttm9NpjPNUo3UR9z9WaiVJdLINBxdSL8uOjOJz/ebQtb1RzJ13MpZ9Nv3FeWp/g+ETY37zny7mAuorYC0H/AhXkBD+qLpK1WDVXsdkG2kc4kNkorMLDZSHM11bQdCtKQ8SzR6pMV+KCM0eJ+R7hl1k/oEU6MiIRH3ffl4Pt85ajYzpp1l38s/45lz2wz5cDqFsCbdx/2geUEAbue3RXNFNEVxagoex1/TQoDvEbC6lsRge+WvhcIxbuph6v+LBqwIDAQAB";

    /**
     * RSA private key generated by customer to sign the request
     */
    public static final String privateKey = "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDZpfwN2ECAcT7lfU0UOXcud+7YBlw+BLua3YIn4Xz5Itpqh3v9rqbJbH0YhpZEq3puA5eRW9M8PhAJmCWs5rfP+22b02mM81SjdRH3P1ZqJUl0sg0HF1Ivy46M4nP95tC1vVHMnXcyln02/cV5an+D4RNjfvOfLuYC6itgLQf8CFeQEP6oukrVYNVex2QbaRziQ2SiswsNlIczXVtB0K0pDxLNHqkxX4oIzR4n5HuGXWT+gRToyIhEfd9+Xg+3zlqNjOmnWXfyz/jmXPbDPlwOoWwJt3H/aB5QQBu57dFc0U0RXFqCh7HX9NCgO8RsLqWxGB75a+FwjFu6mHq/4sGrAgMBAAECggEAOueSXQjfBCQiGqgb2VJoMBpjePHXuy06vQIgPLzpPuAw7s32P8Up/K+w95dNSg6C1w1/0uZgOBiv7HjSEYZrzw1EL/06vtwIVyjTEPCCab3nsH6TygyEwMy9quGK9PeoGte/MLqZTQavotdxv5eUJVQgFDiCpN1jgPxxetkVJR94+A9/xuI16yAtXVv7pNyJZY0XU1Y0JzUaCNfgoi5GngOWnHeIWhj7S8vk3Zs/3eN80NO0d8iarUdI4kbgHxQ3bi8+v9c8aPohXkP2pyFoIMaMsUnZR++0EdKeEp85/htwL/Btmy5pDby4ybHmNtvQCQVHmRwnICqxdEaEUgrNaQKBgQDiHaGIlYUD+Xr0FYtjT80gvTSugdMrGpNBzARyootvaFF9JkMi78PtcSuhl5FQ/Yl65l/6NKdmUQ0khlwRBw7YAw19upK0THYEvDkNNIQPelSJsVmzRYWMFZkowAqOnPCBO08BMX3gJo2FyReEEQQqbL/jrxAbFt26IringsNX5wKBgQD2ad6rsEFCVijQThQyUUzyDgPjbYG0xh1EkT90y66086SmStgqBQb9Ajdv3q43wNK4gxI0gMLOPZkkBO3MFq8qD25rmyv+k71DUxFaP/clN7PBr3ZQ/osmWTYn6c4QZuuwYQFVKlt+H4gE4IrFY7lxZaqI4JFCr9m0gEbPqmw/nQKBgHcXLh22ylD2k/h8ZGaRADPPEzEZ9XNNUuOjpXAPBitOISUuAswixemH4ngAUSv77O3K6h/onYY5CBgFn/Xj5sCEkxV2L5BAeSQzUkUPNMLGJkJDI0BVTGokcf9Rbf4A0HbwGsNBIs/s3jrpV7ZaE/yYPFSZvnzWBT/ky6aGK4ZfAoGBAIDXTGljCExCNqbsHF1O6zepIllZGbfG2ujONWrBUUEmH9IfUjVuWYATF59zxI48UTHOvscbCEDELn2J4jiTJ9WLKgYzpWZAI3a/SVRyG6ynGmNMdkXVQjaz8MAf3PHwjo2zuvmn4xzoKbu7GHQrN3xWVzuoh+thfSiG5f+RMXZ1AoGAEySpcA1Ye27zrmYyQEk9nzoTBp8W3BLQa/OUsXUvOSc06faL26aVvAPVZwnQU5LBvzacZax9lQq/2XQVaxeCM/W7BmKR8U2rEYdBLfVllNKEkS7UbcpVuiiLJSG3v+FQLeMpTCOETR65VlW21Le5I10KTZAzryvmV8MTezqBQEU=";

    /**
     * reqauest parameter in alphabetical order
     */
    public static final String sign_fields_request = "api_name,app_id,customer_id,encrypt,encrypt_type,flow_no,sign_type,timestamp,version,biz_data";
    public static final String SIGN_CONNECTION_STRING = "&";
    public static final String SIGN_CONNECTION_EQUAL_STRING = "=";
    public static final String SHA_WITH_RSA_ALGORITHM = "SHA256WithRSA";
    public static final String ALGORITHM = "RSA";
    public static String[] SignKeys;
    public static ObjectMapper objectMapper = new ObjectMapper();

    static String AES_PKCS5P = "AES/CBC/PKCS5Padding";
    static String charsetName = "utf-8";

    static {
        SignKeys = sign_fields_request.split(",");
        Arrays.sort(SignKeys);
    }

    public Map enc() throws Exception {
        Map bizData = new HashMap<String, String>();
        bizData.put("ktp_no", "01130134xxxx");
        bizData.put("msisdn", "63995227xxxx");

        // build request body
        String body = buildRequestJsonBody(bizData, "query.credit.score", "100010001", "10001", true);
        JSONObject jsonObject = new JSONObject(body);
        return jsonObject.toMap();
    }

    public String dec(String base64) throws Exception {
        String cIv = cKey.substring(0, 16);
        String decrypt = decrypt(base64, cKey, cIv);
        return decrypt;
    }

    public static String buildRequestJsonBody(Map<String, Object> bizData, String api_name, String app_id,
            String customer_id, boolean encryptBizData) throws Exception {
        Map requestBody = new HashMap<String, Object>();
        requestBody.put("api_name", api_name);
        requestBody.put("app_id", app_id);
        requestBody.put("customer_id", customer_id);
        requestBody.put("encrypt", encryptBizData);
        requestBody.put("encrypt_type", "AES-CBC");
        requestBody.put("flow_no", UUID.randomUUID().toString().replace("-", ""));
        requestBody.put("sign_type", "RSA-SHA256");
        requestBody.put("timestamp", new Date().getTime());
        requestBody.put("version", "1.0");
        String bizDataJson = objectMapper.writeValueAsString(bizData);
        if (encryptBizData) {
            // IV = 16
            String cIv = cKey.substring(0, 16);
            // encrypt biz_data
            String enString = Encrypt(bizDataJson, cKey, cIv);
            requestBody.put("biz_data", enString);
        } else {
            // don't need encryption
            requestBody.put("biz_data", bizDataJson);
        }

        // build signature string
        String requestSignString = BuildSignString(requestBody);
        String sign = EncryptAndSign1.sign(requestSignString, privateKey, SHA_WITH_RSA_ALGORITHM);

        requestBody.put("sign", sign);
        return objectMapper.writeValueAsString(requestBody);
    }

    /**
     * generate the signature
     * 
     * @param in
     * @param pivateKey
     * @param algorithm
     * @return
     * @throws Exception
     */
    public static String sign(String in, String pivateKey, String algorithm) throws Exception {
        PKCS8EncodedKeySpec priPKCS8 = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(pivateKey));
        KeyFactory keyf = KeyFactory.getInstance(ALGORITHM);
        PrivateKey priKey = keyf.generatePrivate(priPKCS8);
        Signature signa = Signature.getInstance(algorithm != null ? algorithm : SHA_WITH_RSA_ALGORITHM);
        signa.initSign(priKey);
        signa.update(in.getBytes());
        byte[] signdata = signa.sign();
        return Base64.getEncoder().encodeToString(signdata);
    }

    /**
     * verify the signature
     * 
     * @param in
     * @param signData
     * @param publicKey
     * @param algorithm
     * @return
     * @throws Exception
     */
    public static boolean isValid(String in, String signData, String publicKey, String algorithm) throws Exception {
        KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);
        byte[] encodedKey = Base64.getDecoder().decode(publicKey);
        PublicKey pubKey = keyFactory.generatePublic(new X509EncodedKeySpec(encodedKey));
        Signature signa = Signature.getInstance(algorithm != null ? algorithm : SHA_WITH_RSA_ALGORITHM);
        signa.initVerify(pubKey);
        signa.update(in.getBytes());
        byte[] sign_byte = Base64.getDecoder().decode(signData);
        boolean flag = signa.verify(sign_byte);
        return flag;
    }

    public static String BuildSignString(Map<String, Object> requestBody) throws JsonProcessingException {
        StringBuilder buff = new StringBuilder("");
        // connect string with &
        int index = 0;
        for (String key : SignKeys) {
            if (index > 0) {
                buff.append(SIGN_CONNECTION_STRING);
            }
            String value = objectMapper.writeValueAsString(requestBody.get(key));
            buff.append(key).append(SIGN_CONNECTION_EQUAL_STRING).append(value);
            index++;
        }
        return buff.toString();
    }

    /**
     * encrypt data with AES
     * 
     * @param sSrc
     * @param sKey
     * @param sIv
     * @return
     * @throws Exception
     */
    public static String Encrypt(String sSrc, String sKey, String sIv) throws Exception {
        if (sKey == null) {
            System.out.print("key is null");
            return null;
        }
        byte[] raw = sKey.getBytes(charsetName);
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
        Cipher cipher = Cipher.getInstance(AES_PKCS5P);
        IvParameterSpec iv = new IvParameterSpec(sIv.getBytes());
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
        byte[] encrypted = cipher.doFinal(sSrc.getBytes());
        // base 64
        return Base64.getEncoder().encodeToString(encrypted);
    }

    /**
     * decrypt data with AES
     * 
     * @param base64Str
     * @param key
     * @param sIv
     * @return
     * @throws Exception
     */
    public static String decrypt(String base64Str, String key, String sIv) throws Exception {
        byte[] raw = key.getBytes(charsetName);
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
        Cipher cipher = Cipher.getInstance(AES_PKCS5P);
        IvParameterSpec iv = new IvParameterSpec(sIv.getBytes());
        cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);
        // decode with base64
        byte[] encrypted = Base64.getDecoder().decode(base64Str);
        byte[] original = cipher.doFinal(encrypted);
        String originalString = new String(original, "utf-8");
        return originalString;
    }

}
